"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
 Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
● выбрать хорошую задачу, которую имеет смысл оценивать по памяти (укажите какую задачу вы взяли в комментарии);
● написать 3 варианта кода (один у вас уже есть);
● проанализировать 3 варианта и выбрать оптимальный;
● результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
● написать общий вывод: какой из трёх вариантов лучше и почему.
Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной, а проявили
творчество, фантазию и создали универсальный код для замера памяти.
"""
# Win10 64-bit, Python 3.9

import sys
# 1.1.Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.
# a)
n = int(input("Введите целое трехзначное число: "))
a = n % 10
b = n % 100 // 10
c = n // 100
s = a + b + c
m = a * b * c
print(f'Сумма трехзначного числа {n}: {s}')
print(f'Произведение трехзначного числа {n}: {m}')

S_size_memory = 0
S_size_memory += sys.getsizeof(n)
S_size_memory += sys.getsizeof(a)
S_size_memory += sys.getsizeof(b)
S_size_memory += sys.getsizeof(c)
S_size_memory += sys.getsizeof(s)
S_size_memory += sys.getsizeof(m)
print('Переменные занимают', S_size_memory)
# Затраты памяти 156-168

# b)

n = input("Введите целое трехзначное число: ")
sum_n = 0
mul_n = 1
for i in n:
    sum_n += int(i)
    mul_n *= int(i)
print(f"Сумма цифр трехзначного числа {n}: {sum_n}")
print(f"Произведение цифр трехзначного числа {n}: {mul_n}")

S_size_memory = 0
S_size_memory += sys.getsizeof(n)
S_size_memory += sys.getsizeof(i)
S_size_memory += sys.getsizeof(sum_n)
S_size_memory += sys.getsizeof(mul_n)
print('Переменные занимают', S_size_memory)
# Затраты памяти 154 - 156

# c)

n = str(input("Введите целое трехзначное число: "))
print(f'Сумма цифр трехзначного числа {n}= {int(n[0]) + int(n[1]) + int(n[2])}')
print(f'Произведение трехзначного числа {n}= {int(n[0]) * int(n[1]) * int(n[2])}')

S_size_memory = 0
S_size_memory += sys.getsizeof(n)
#S_size_memory += sys.getsizeof(int(n[0]))
#S_size_memory += sys.getsizeof(int(n[1]))
#S_size_memory += sys.getsizeof(int(n[2]))
S_size_memory+= sys.getsizeof({int(n[0]) + int(n[1]) + int(n[2])})
S_size_memory += sys.getsizeof({int(n[0]) * int(n[1]) * int(n[2])})
print('Переменные занимают', S_size_memory)
# Затраты памяти 484-485

# b) def

n = input("Введите целое трехзначное число: ")
def sum_mul(n):
    sum_n = 0
    mul_n = 1
    for i in n:
        sum_n += int(i)
        mul_n *= int(i)
    return f"Сумма цифр трехзначного числа {n}: {sum_n}" and f"Произведение цифр трехзначного числа {n}: {mul_n}"

print(f'Размер всех переменных {sys.getsizeof(sum_mul(n))}')
# Затраты памяти 160 - 162
#S = 0
#for size in sum_mul(n):
#    S += sys.getsizeof(size)
#print(f'Размер всех переменных, {S}')
# Затраты памяти 3058

"""
Вывод:
По результатам проверки самые минимальные затраты памяти при втором варианте решения. Но в целом разница не большая, 
но даже на этом примере видно что при увелечении переменных или вложенных решений память будет увеличиваться и 
настанет момент когда ее не станет) 
Третий пример показывает большие значение памяти, если замерить в общем, если по отдельности, 
то схоже с 1 или 2 решением.
Меньше переменных и обращений к ним. Временные переменные из обращения выходят быстрее, тоесть освобождается память
для дальнейшего использования. Хотя по примерам не так видно, но в целом в дальнейших запросах можно проследить.

"""
